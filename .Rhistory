panel.background = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p = p + labs(title = "Number of articles from each country on Facebook")
plot(p)
length(greb("England",t1))
("England",t1))
length(grep(england,t1))
grep("england",t1)
lentgh(grep("england",t1))
length(grep("england",t1))
length(grep("england",t3))
length(grep("obama",t3))
length(grep("obama",t1))
length(grep("løkke",t1))
length(grep("schmidt",t1))
length(grep("thelesen",t1))
length(grep("thulesen",t1))
length(grep("kjærsgaard",t1))
length(grep("dansk folkeparti",t1))
length(grep("venstre",t1))
length(grep("socialdemokratiet",t1))
length(grep("socialdemo",t1))
View(facebook_iso)
View(face_map)
distance = face_map %>%
group_by(region) %>%
mean(longitude)
View(face_map)
distance = face_map %>%
group_by(region) %>%
mean(as.numeric(longitude)
distance = face_map %>%
group_by(region) %>%
mean(as.numeric(longitude))
View(face_map)
distance = ddply(face_map, .(region), summarize,  lat=mean(lat), long=mean(long))
View(distance)
View(distance)
distance$&R = 6371 # Earth mean radius [km]
distance$d <- acos(sin(55.7049944)*sin(distance$lat) + cos(55.7049944)*cos(distance$lat) * cos(distance$long-10.7276659)) * R
distance$d <- acos(sin(55.7049944)*sin(distance$lat) + cos(55.7049944)*cos(distance$lat) * cos(distance$long-10.7276659)) * distance$R
distance$d <- acos(sin(55.7049944)*sin(distance$lat) + cos(55.7049944)*cos(distance$lat) * cos(distance$long-10.7276659)) * 6371
distance$latrad <- (distance$lat*pi/180)
distance$longrad <- (distance$long*pi/180)
distance$d <- acos(sin(55.7049944)*sin(distance$latrad) + cos(55.7049944)*cos(distance$latrad) * cos(distance$longrad-10.7276659)) * 6371
distance$d <- acos(sin(0.972235562)*sin(distance$latrad) + cos(0.972235562)*cos(distance$latrad) * cos(distance$longrad-0.18723309)) * 6371
p.data = list() # initialize empty list
for (i in lande.df$land){
print(paste("processing", i, sep = " "))
p.data[[i]] = grep(i,t3)
cat(" done!\n")
}
oversigt = ldply(p.data, data.frame)
View(oversigt)
t3[1,1]
t3[1]
facebook_article[1,1]
View(facebook_article)
facebook_article[1,7]
View(oversigt)
oversigt$likes = facebook_article[X..i..,7]
oversigt$likes = facebook_article(X..i..,7)
facebook_article[1,7]
oversigt$likes = facebook_article[X..i..,7]
oversigt$likes = facebook_article[oversigt$X..i..,7]
View(oversigt)
?left_join
View(distance)
distance$land = distance$region
df = left_join(oversigt, distance, by = "land")
View(oversigt)
View(distance)
distance$land = lowercase(distance$region)
distance$land = tolower(distance$region)
df = left_join(oversigt, distance, by = "land")
View(oversigt)
View(oversigt)
oversigt$land = oversigt$.id
df = left_join(oversigt, distance, by = "land")
View(df)
View(df)
df = ddply(df,.(land), summarize, avg_like=mean(likes), distance = mean(d))
plot(df$avg_like, df$avg_like)
plot(df$avg_like, df$distance)
plot(df$distance, df$avg_like)
oversigt = ldply(p.data, data.frame)
oversigt$likes = facebook_article[oversigt$X..i..,7]
oversigt$land = oversigt$.id
distance$land = tolower(distance$region)
df = left_join(oversigt, distance, by = "land")
#df = ddply(df,.(land), summarize, avg_like=mean(likes), distance = mean(d))
plot(df$d, df$likes)
oversigt = ldply(p.data, data.frame)
oversigt$likes = facebook_article[oversigt$X..i..,7]
oversigt$land = oversigt$.id
distance$land = tolower(distance$region)
df = left_join(oversigt, distance, by = "land")
df = ddply(df,.(land), summarize, avg_like=mean(likes), distance = mean(d))
plot(df$d, df$likes)
plot(df$distance, df$avg_like)
View(df)
View(artikler_land)
View(oversigt)
View(facebook_article)
View(df)
View(facebook_article)
plot(df$distance, df$avg_like)
abline(lm(df$distance~df$avg_like), col="red")
plot(df$distance, df$avg_like)
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, xlab = "Distance from DK", ylab = "Average number of likes")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
p = ggplot(df, aes(x = distance, y = avg_like))
p + geom_point() + geom_smooth()
p = ggplot(df, aes(x = distance, y = avg_like))
p + geom_point() + geom_smooth(method = "lm")
p = ggplot(df, aes(x = distance, y = avg_like))
p = p + geom_point() + geom_smooth(method = "lm")
p = p l labs(title = "#Likes by Distance", xlab = "Distance from DK", ylab = "Average number of likes")
plot(p)
p = ggplot(df, aes(x = distance, y = avg_like))
p = p + geom_point() + geom_smooth(method = "lm")
p = p + labs(title = "#Likes by Distance", xlab = "Distance from DK", ylab = "Average number of likes")
plot(p)
p = ggplot(df, aes(x = distance, y = avg_like))
p = p + geom_point() + geom_smooth(method = "lm")
p = p + labs(title = "#Likes by Distance", x = "Distance from DK", y = "Average number of likes")
plot(p)
p = ggplot(df, aes(x = distance, y = avg_like))
p = p + geom_point() + geom_smooth(method = "lm")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p = p + labs(title = "#Likes by Distance", x = "Distance from DK", y = "Average number of likes")
plot(p)
p = ggplot(df, aes(x = distance, y = avg_like))
p = p + geom_point() + geom_smooth(method = "lm")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
p = p + labs(title = "#Likes by Distance", x = "Distance from DK", y = "Average number of likes")
plot(p)
p = ggplot(df, aes(x = distance, y = avg_like))
p = p + geom_point() + geom_smooth(method = "lm")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank())
p = p + labs(title = "#Likes by Distance", x = "Distance from DK", y = "Average number of likes")
plot(p)
p = ggplot(df, aes(x = distance, y = avg_like))
p = p + geom_point() + geom_smooth(method = "lm")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank())
p = p + labs(title = "#Likes by Distance", x = "Distance from DK", y = "Average number of likes")
plot(p)
p = ggplot(df, aes(x = distance, y = avg_like))
p = p + geom_point() + geom_smooth(method = "lm")
p = p + theme(panel.background = element_blank())
p = p + labs(title = "#Likes by Distance", x = "Distance from DK", y = "Average number of likes")
plot(p)
plot(df$distance, df$avg_like, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
?plot
plot(df$distance, df$avg_like, pch = 20, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 10, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 90, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 27, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 2, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 17, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 10, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
p = ggplot(face_map, aes(x = long, y = lat, group = group, fill = number_of_articles))
p = p + geom_polygon()
p = p + scale_fill_gradient(limits = c(0,7000))
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p = p + labs(title = "Article intensity by country on Facebook")
plot(p)
p = ggplot(df_map, aes(x = long, y = lat, group = group, fill = number_of_articles))
p = p + geom_polygon()
p = p + scale_fill_gradient(limits = c(0,7000))
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p = p + labs(title = "Article intensity by country")
plot(p)
table(df_map$Land[1:10])
head(df_map$Land[1:10])
df_map$Land[1:10])
df_map$Land[1:10]
df_map$and[1:10]
df_map$land[1:10]
View(df_map)
View(df_map)
View(artikler_land)
artikler_land$land[1:10]
arrange(artikler_land, X..i..)
head(arrange(artikler_land, -X..i..)[1:10])
arrange(artikler_land, -X..i..)
sample(arrange(artikler_land, -X..i..),10)
sample(arrange(artikler_land, -X..i..),2)
sample(arrange(artikler_land, -X..i..),[1,10])
arrange(artikler_land, -X..i..)
View(facebook_article)
View(facebook_land)
arrange(facebook_land, -X..i..)
library(plyr)
library(dplyr)
library(MASS)
library(rvest)
library("stringr")
library("ggmap")
library("countrycode")
## This program generates data to country graphs and average likes * distance ##
# We start by taking in data from all articles
load(url("https://github.com/bjarkedahl/Group_16/blob/master/DR%20and%20Politiken%20all.RData?raw=true"))
## Collecting all country names in one dataframe ##
css.selector = ".MOB"
link = "https://www.skolekom.dk/~geolog.821009@skolekom.dk/"
lande.data = read_html(link) %>%
html_nodes(css = css.selector) %>%
html_text()
cbind(lande.data)
lande.df = ldply(lande.data, data.frame)
lande.df$land = tolower(as.character(lande.df$X..i..))
# Changing speciel letters
lande.df$land= gsub("ã¦", "æ", lande.df$land)
lande.df$land= gsub("ã¸", "ø", lande.df$land)
lande.df$land= gsub("ã~", "ø", lande.df$land)
#Generating vector only containing the text strings
t1 = c(as.character(DR_pol_all$text))
# Collecting the number of articles where the different countries are named
p.data = list() # initialize empty list
for (i in lande.df$land){
print(paste("processing", i, sep = " "))
p.data[[i]] = length(grep(i,t1))
cat(" done!\n")
}
# Gathering number of articles for each country
artikler_land = ldply(p.data, data.frame)
# Collecting ISO codes and merging them with countrynames for mapping
link = "https://da.wikipedia.org/wiki/ISO_3166-1"
land = read_html(link) %>%
html_nodes(".wikitable") %>%
html_table()
iso = ldply(land, data.frame)
iso$land = gsub("Â", "", iso$Land)
iso$land = str_trim(iso$land)
iso$land = tolower(as.character(iso$land))
iso$land= gsub("ã¦", "æ", iso$land)
iso$land= gsub("ã¸", "ø", iso$land)
iso$land= gsub("ã~", "ø", iso$land)
iso$land= gsub("ã˜", "ø", iso$land)
iso$land= gsub("usa", "u.s.a", iso$land)
artikler_land$land = artikler_land$.id
# Megring so we have ISO codes for all countries
lande_iso = left_join(artikler_land, iso, by = "land")
lande_iso$number_of_articles = lande_iso$X..i..
lande_iso$iso = lande_iso$Alfa.2
#Collecting map data
map.df = map_data("world")
map.df$iso = countrycode(map.df$region, origin = "country.name", destination = "iso2c")
# Merging with Article Data
df_map = right_join(lande_iso, map.df, by = "iso")
# Next we only want to Collect number of articles on Facebook for each country in a Dataframe
# Selecting articles on Facebook
facebook_article = subset(DR_pol_all, DR_pol_all$likes_count!="NA")
t3 = c(as.character(facebook_article$text))
# Collecting number of articles each country is named in
facebook.data = list() # initialize empty list
for (i in lande.df$land){
print(paste("processing", i, sep = " "))
facebook.data[[i]] = length(grep(i,t3))
cat(" done!\n")
}
# Gathering number of articles for each country and merging with iso codes
facebook_land = ldply(facebook.data, data.frame)
facebook_land$land = facebook_land$.id
facebook_iso = left_join(facebook_land, iso, by = "land")
facebook_iso$number_of_articles = facebook_iso$X..i..
facebook_iso$iso = lande_iso$Alfa.2
face_map = right_join(facebook_iso, map.df, by = "iso")
## the Scatter plot
## Calculating Distance to Denmark
# First calculating average longitude and lattitude for each country
distance = ddply(face_map, .(region), summarize,  lat=mean(lat), long=mean(long))
#calculating longitude and latitude as radian
distance$latrad <- (distance$lat*pi/180)
distance$longrad <- (distance$long*pi/180)
# Calculates the geodesic distance between two points specified by radian latitude/longitude using the
# Spherical Law of Cosines (slc)
distance$d <- acos(sin(0.972235562)*sin(distance$latrad) + cos(0.972235562)*cos(distance$latrad) * cos(distance$longrad-0.18723309)) * 6371
# Getting the article number for each article from each country
p.data = list() # initialize empty list
for (i in lande.df$land){
print(paste("processing", i, sep = " "))
p.data[[i]] = grep(i,t3)
cat(" done!\n")
}
oversigt = ldply(p.data, data.frame)
# Getting the number of likes
oversigt$likes = facebook_article[oversigt$X..i..,7]
oversigt$land = oversigt$.id
distance$land = tolower(distance$region)
df = left_join(oversigt, distance, by = "land")
df = ddply(df,.(land), summarize, avg_like=mean(likes), distance = mean(d))
save.image("X:/MikkelM/SDS/R/Group_16/map_data.RData")
p = ggplot(df_map, aes(x = long, y = lat, group = group, fill = number_of_articles))
p = p + geom_polygon()
p = p + scale_fill_gradient(limits = c(0,7000))
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p = p + labs(title = "Article intensity by country")
plot(p)
p = ggplot(face_map, aes(x = long, y = lat, group = group, fill = number_of_articles))
p = p + geom_polygon()
p = p + scale_fill_gradient(limits = c(0,7000))
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
p = p + labs(title = "Article intensity by country on Facebook")
plot(p)
plot(df$distance, df$avg_like, pch = 10, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 90, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 1, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 2, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 3, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 4, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 5, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 6, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 55, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 89, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 25, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 1, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes x Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 1, xlab = "Distance from DK", ylab = "Average number of likes", main = "# Likes vs. Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 1, xlab = "Distance from DK, km", ylab = "Average number of likes", main = "# Likes vs. Distance")
abline(lm(df$avg_like~df$distance), col="red")
plot(df$distance, df$avg_like, pch = 1, xlab = "Distance from DK, km", ylab = "Average number of likes", main = "Number of likes vs. distance")
abline(lm(df$avg_like~df$distance), col="red")
View(df)
View(df)
load(url("https://github.com/bjarkedahl/Group_16/blob/c8805ed5a7c7b48ed39d206782b2d0e4781e6b7e/map_data.RDataTmp"))
load(url("https://github.com/bjarkedahl/Group_16/blob/master/map_data.RDataTmp"))
load(url("https://github.com/bjarkedahl/Group_16/blob/master/map_data.RDataTmp?raw=true"))
load(url("https://github.com/bjarkedahl/Group_16/blob/master/map_data.RDataTmp?raw=true"))
load(url("https://github.com/bjarkedahl/Group_16/blob/master/map_data.RData?raw=true"))
library(plyr)
library(dplyr)
library(MASS)
library(rvest)
library("stringr")
library("ggmap")
library("countrycode")
## This program generates data to country graphs and average likes * distance ##
# We start by taking in data from all articles
load(url("https://github.com/bjarkedahl/Group_16/blob/master/DR%20and%20Politiken%20all.RData?raw=true"))
## Collecting all country names in one dataframe ##
css.selector = ".MOB"
link = "https://www.skolekom.dk/~geolog.821009@skolekom.dk/"
lande.data = read_html(link) %>%
html_nodes(css = css.selector) %>%
html_text()
cbind(lande.data)
lande.df = ldply(lande.data, data.frame)
lande.df$land = tolower(as.character(lande.df$X..i..))
# Changing speciel letters
lande.df$land= gsub("ã¦", "æ", lande.df$land)
lande.df$land= gsub("ã¸", "ø", lande.df$land)
lande.df$land= gsub("ã~", "ø", lande.df$land)
#Generating vector only containing the text strings
t1 = c(as.character(DR_pol_all$text))
# Collecting the number of articles where the different countries are named
p.data = list() # initialize empty list
for (i in lande.df$land){
print(paste("processing", i, sep = " "))
p.data[[i]] = length(grep(i,t1))
cat(" done!\n")
}
# Gathering number of articles for each country
artikler_land = ldply(p.data, data.frame)
# Collecting ISO codes and merging them with countrynames for mapping
link = "https://da.wikipedia.org/wiki/ISO_3166-1"
land = read_html(link) %>%
html_nodes(".wikitable") %>%
html_table()
iso = ldply(land, data.frame)
iso$land = gsub("Â", "", iso$Land)
iso$land = str_trim(iso$land)
iso$land = tolower(as.character(iso$land))
iso$land= gsub("ã¦", "æ", iso$land)
iso$land= gsub("ã¸", "ø", iso$land)
iso$land= gsub("ã~", "ø", iso$land)
iso$land= gsub("ã˜", "ø", iso$land)
iso$land= gsub("usa", "u.s.a", iso$land)
artikler_land$land = artikler_land$.id
# Megring so we have ISO codes for all countries
lande_iso = left_join(artikler_land, iso, by = "land")
lande_iso$number_of_articles = lande_iso$X..i..
lande_iso$iso = lande_iso$Alfa.2
#Collecting map data
map.df = map_data("world")
map.df$iso = countrycode(map.df$region, origin = "country.name", destination = "iso2c")
# Merging with Article Data
df_map = right_join(lande_iso, map.df, by = "iso")
# Next we only want to Collect number of articles on Facebook for each country in a Dataframe
# Selecting articles on Facebook
facebook_article = subset(DR_pol_all, DR_pol_all$likes_count!="NA")
t3 = c(as.character(facebook_article$text))
# Collecting number of articles each country is named in
facebook.data = list() # initialize empty list
for (i in lande.df$land){
print(paste("processing", i, sep = " "))
facebook.data[[i]] = length(grep(i,t3))
cat(" done!\n")
}
# Gathering number of articles for each country and merging with iso codes
facebook_land = ldply(facebook.data, data.frame)
facebook_land$land = facebook_land$.id
facebook_iso = left_join(facebook_land, iso, by = "land")
facebook_iso$number_of_articles = facebook_iso$X..i..
facebook_iso$iso = lande_iso$Alfa.2
face_map = right_join(facebook_iso, map.df, by = "iso")
## the Scatter plot
## Calculating Distance to Denmark
# First calculating average longitude and lattitude for each country
distance = ddply(face_map, .(region), summarize,  lat=mean(lat), long=mean(long))
#calculating longitude and latitude as radian
distance$latrad <- (distance$lat*pi/180)
distance$longrad <- (distance$long*pi/180)
# Calculates the geodesic distance between two points specified by radian latitude/longitude using the
# Spherical Law of Cosines (slc)
distance$d <- acos(sin(0.972235562)*sin(distance$latrad) + cos(0.972235562)*cos(distance$latrad) * cos(distance$longrad-0.18723309)) * 6371
# Getting the article number for each article from each country
p.data = list() # initialize empty list
for (i in lande.df$land){
print(paste("processing", i, sep = " "))
p.data[[i]] = grep(i,t3)
cat(" done!\n")
}
oversigt = ldply(p.data, data.frame)
# Getting the number of likes
oversigt$likes = facebook_article[oversigt$X..i..,7]
oversigt$land = oversigt$.id
distance$land = tolower(distance$region)
df = left_join(oversigt, distance, by = "land")
df = ddply(df,.(land), summarize, avg_like=mean(likes), distance = mean(d))
save.image("X:/MikkelM/SDS/R/Group_16/map_data.RData")
save.image("X:/MikkelM/SDS/R/Group_16/mapdata.Rdata.RData")
