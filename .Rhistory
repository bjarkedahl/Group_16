p = p + scale_y_log10()
plot(p)
df_state$relativepayment = as.numeric(df_state$total.payments) / as.numeric(df_state$pop1) * 100000
#Plotting the data to se the states with the highest relative bribe payments
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=Relativebribes_urban))
p = p + geom_bar(stat="identity") + coord_flip() + labs(title = "Figure 5: Bribes pr. 100,000 urban inhabitants",
x = "State",
y = "Bribes pr. 100,000 urban inhabitants")
p = p + scale_y_continuous()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=Relativebribes_urban))
p = p + geom_bar(stat="identity") + coord_flip() + labs(title = "Figure 5: Bribes pr. 100,000 urban inhabitants",
x = "State",
y = "Bribes pr. 100,000 urban inhabitants")
p = p + scale_y_log10()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=urban_relativepayment))
p = p + geom_bar(stat="identity") + coord_flip() + labs(title = "Figure 5: Bribes pr. 100,000 urban inhabitants",
x = "State",
y = "Bribes pr. 100,000 urban inhabitants")
p = p + scale_y_log10()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10()
plot(p)
p = ggplot(data = df_state, aes(x=Relativebribes, y=share_urban_pop))
p = p + geom_point() + coord_flip() + labs(title = "Figure 6: Relative bribes compared to share of total population living in urban areas",
x = "Log of bribes pr. 100.000 inhabitants",
y = "Share of population living in urban areas")
p = p
plot(p)
cor(df_state$share_urban_pop, df_state$relativepayment)
cor(df_state$share_urban_pop, df_state$Relativebribes)
p = ggplot(data = df_state, aes(x=urban_relativepayment, y=share_urban_pop))
p = p + geom_point() + coord_flip() + labs(title = "Figure 6: Relative bribes compared to share of total population living in urban areas",
x = "Log of bribes pr. 100.000 inhabitants",
y = "Share of population living in urban areas")
p = p
plot(p)
p = ggplot(data = df_state, aes(x=urban_relativepayment, y=share_urban_pop))
p = p + geom_point() + coord_flip() + labs(title = "Figure 6: Relative bribes compared to share of total population living in urban areas",
x = "Log of bribes pr. 100.000 inhabitants",
y = "Share of population living in urban areas")
p = p + scale_x_log10()
plot(p)
p = ggplot(data = df_state, aes(x=relativepayment, y=share_urban_pop))
p = p + geom_point() + coord_flip() + labs(title = "Figure 6: Relative bribes compared to share of total population living in urban areas",
x = "Log of bribes pr. 100.000 inhabitants",
y = "Share of population living in urban areas")
p = p + scale_x_log10()
plot(p)
library("mapproj")
install.packages("mapproj")
library("mapproj")
p = ggplot(data = df_state, aes(x=relativepayment, y=share_urban_pop))
p = p + geom_point() + coord_flip() + labs(title = "Figure 6: Relative payments compared to share of total population living in urban areas",
x = "Log of payments pr. 100.000 inhabitants",
y = "Share of population living in urban areas")
p = p + scale_x_log10()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=urban_relativepayment))
p = p + geom_bar(stat="identity") + coord_flip() + labs(title = "Figure 5: Bribes pr. 100,000 urban inhabitants",
x = "State",
y = "Bribes pr. 100,000 urban inhabitants")
p = p + scale_y_log10()
plot(p)
df_state$urbanpop=gsub(",", "",df_state$Urban.Population.24.)
df_state$urbanpop1 = gsub("^\\s+", "", df_state$urbanpop)
as.numeric(df_state$urbanpop1)
df_state$urban_relativepayment = as.numeric(df_state$total.payments)/
as.numeric(df_state$urbanpop1)*100000
df_state$share_urban_pop = as.numeric(df_state$urbanpop1)/as.numeric(df_state$pop1)
df_state$Relativebribes = as.numeric(df_state$n_bribes)/as.numeric(df_state$pop1)
df_state$Relativebribes_urban = as.numeric(df_state$n_bribes)/as.numeric(df_state$urbanpop)
p = ggplot(data = df_state, aes(x=state_2, y=urban_relativepayment))
p = p + geom_bar(stat="identity") + coord_flip() + labs(title = "Figure 5: Relative bribe-pay pr. 100,000 urban inhabitants",
x = "State",
y = "Bribes pr. 100,000 urban inhabitants")
p = p + scale_y_log10()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10()
plot(p)
library ("plyr")
library ("dplyr")
library ("rvest")
library ("readr")
library ("knitr")
library ("stringr")
library ("xml2")
library ("ggplot2")
library("mapproj")
library("tm")
#library("austin")
library("quanteda")
library("stm")
library("RTextTools")
library("mfx")
# Load data
load(url("https://github.com/bjarkedahl/Group_16/blob/master/Subset%20of%204000%20obs%20from%20DR%20and%20Politiken.RData?raw=true"))
load("X:/MikkelM/SDS/R/Group_16/DR and Politiken all.RData")
View(DR_pol_all)
View(DR_pol_all)
View(DR_pol_all)
p = ggplot(data = DR_pol_all, aes(x = date())
p = p + geom_density(stat = "identity", position = "dodge", width = 0.8) +
labs(x = "Date", y = "# of articles")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
legend.direction = "horizontal",
text = element_text(size=10))
plot(p)
p = ggplot(data = DR_pol_all, aes(x = date)
p = p + geom_density(stat = "identity", position = "dodge", width = 0.8) +
labs(x = "Date", y = "# of articles")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
legend.direction = "horizontal",
text = element_text(size=10))
plot(p)
p = ggplot(data = DR_pol_all, aes(x = as.date(date))
p = p + geom_density(stat = "identity", position = "dodge", width = 0.8) +
labs(x = "Date", y = "# of articles")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
legend.direction = "horizontal",
text = element_text(size=10))
plot(p)
p = ggplot(data = DR_pol_all, aes(x = likes_count)
p = p + geom_density(stat = "identity", position = "dodge", width = 0.8) +
labs(x = "Date", y = "# of articles")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
legend.direction = "horizontal",
text = element_text(size=10))
plot(p)
p = ggplot(data = DR_pol_all, aes(x = likes_count))
p = p + geom_density(stat = "identity", position = "dodge", width = 0.8) +
labs(x = "Date", y = "No. of articles")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
legend.direction = "horizontal",
text = element_text(size=10))
plot(p)
p = ggplot(data = DR_pol_all, aes(x = date)
p = p + geom_density(stat = "identity", position = "dodge", width = 0.8) +
labs(x = "Date", y = "No. of articles")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
legend.direction = "horizontal",
text = element_text(size=10))
plot(p)
p = ggplot(data = DR_pol_all, aes(x = date)
p = p + geom_density(stat = "identity", position = "dodge", width = 0.8) +
labs(x = "Date", y = "No. of articles")
plot(p)
?ggplot
p = ggplot(data = DR_pol_all, aes(x = date)
p = p + geom_histogram(stat = "identity", position = "dodge", width = 0.8) +
labs(x = "Date", y = "No. of articles")
plot(p)
View(DR_pol_all)
p = ggplot(data = DR_pol_all, aes(x = as.Date(date)
p = p + geom_histogram(stat = "identity", position = "dodge", width = 0.8) +
p = ggplot(data = DR_pol_all, aes(x = as.Date(date)
p = p + geom_histogram(stat = "identity", position = "dodge", width = 0.8) +
labs(x = "Date", y = "No. of articles")
p = ggplot(data = DR_pol_all, aes(x = as.Date(date))
p = p + geom_histogram(stat = "identity", position = "dodge", width = 0.8) +
labs(x = "Date", y = "No. of articles")
p = ggplot(data = DR_pol_all, aes(x = as.Date(date))
p = p + geom_histogram(stat = "identity", position = "dodge", width = 0.8) +
labs(x = "Date", y = "No. of articles")
p = ggplot(data = DR_pol_all, aes(x = as.Date(date))
p = p + geom_line(stat = "identity", position = "dodge", width = 0.8) +
labs(x = "Date", y = "No. of articles")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
legend.direction = "horizontal",
text = element_text(size=10))
plot(p)
p = ggplot(data = DR_pol_all, aes(x = as.Date(date))
p = p + geom_line() + labs(x = "Date", y = "No. of articles")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
legend.direction = "horizontal",
text = element_text(size=10))
plot(p)
p = ggplot(data = DR_pol_all, aes(x = as.Date(date))
p = p + geom_line() + labs(x = "Date", y = "No. of articles")
Posted_section = DR_pol_all %>%
group_by(media, section, FB_shared) %>%
summarise(amount=n()) %>%
mutate(pct=as.numeric(round(amount/sum(amount)*100, 2))) %>%
filter(!FB_shared == "0") %>%
ungroup
p = ggplot(data = Posted_section, aes(x = reorder(section, pct), y = pct, fill = media))
p = p + geom_bar(stat = "identity", position = "dodge", width = 0.8) + coord_flip() +
labs(x = "Section", y = "Proportion of articles")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
legend.direction = "horizontal",
text = element_text(size=10))
plot(p)
df <- DR_pol_all %>%
group_by(date) %.%
summarise(DateObservations = length(date) %.%
summarise(DatePct = DateObservation/nrow(DR_pol_all)
p = ggplot(ddf, aes(x = date, y = DatePct))
p = p + geom_line() + labs(x = "Date", y = "No. of articles")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
legend.direction = "horizontal",
text = element_text(size=10))
plot(p)
df <- DR_pol_all %>%
group_by(date) %>%
summarise(DateObservations = length(date) %>%
summarise(DatePct = DateObservation/nrow(DR_pol_all)
p = ggplot(df, aes(x = date, y = DatePct))
p = p + geom_line() + labs(x = "Date", y = "No. of articles")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
legend.direction = "horizontal",
text = element_text(size=10))
plot(p)
df <- DR_pol_all %>%
group_by(date) %>%
summarise(DateObservations = n(date) %>%
summarise(DatePct = DateObservation/nrow(DR_pol_all)
p = ggplot(df, aes(x = date, y = DatePct))
p = p + geom_bar() + labs(x = "Date", y = "No. of articles")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
legend.direction = "horizontal",
text = element_text(size=10))
plot(p)
load("X:/MikkelM/SDS/R/Group_16/politiken_all.RData")
politiken$on_facebook = 1 if politiken$likes_count!="NA" ifelse(politiken$on_facebook=0)
if politiken$likes_count !="NA" {politiken$on_facebook = 1} ifelse(politiken$on_facebook=0)
if (politiken$likes_count !="NA") {politiken$on_facebook = 1} else(politiken$on_facebook=0)
politiken$on_facebook = (politiken$likes_count!="NA")
View(politiken)
summarise(politiken$on_facebook)
table(politiken$on_facebook)
```{r, fig.height=4, echo=FALSE, cache=FALSE, message=FALSE, warning=FALSE}
# Share of articles posted on Facebook by each section
# By media
Posted_section = DR_pol_all %>%
group_by(media, section, FB_shared) %>%
summarise(amount=n()) %>%
mutate(pct=as.numeric(round(amount/sum(amount)*100, 2))) %>%
filter(!FB_shared == "0") %>%
ungroup
p = ggplot(data = Posted_section, aes(x = reorder(section, pct), y = pct, fill = media))
p = p + geom_bar(stat = "identity", position = "dodge", width = 0.8) + coord_flip() +
labs(x = "Section", y = "Proportion of articles")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
legend.direction = "horizontal",
text = element_text(size=10))
plot(p)
```
Posted_section = DR_pol_sub %>%
group_by(media, section, FB_shared) %>%
summarise(amount=n()) %>%
mutate(pct=as.numeric(round(amount/sum(amount)*100, 2))) %>%
filter(!FB_shared == "0") %>%
ungroup
p = ggplot(data = Posted_section, aes(x = reorder(section, pct), y = pct, fill = media))
p = p + geom_bar(stat = "identity", position = "dodge", width = 0.8) + coord_flip() +
labs(x = "Section", y = "Proportion of articles")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
legend.direction = "horizontal",
text = element_text(size=10))
plot(p)
Posted_section = DR_pol_all %>%
group_by(media, section, FB_shared) %>%
summarise(amount=n()) %>%
mutate(pct=as.numeric(round(amount/sum(amount)*100, 2))) %>%
filter(!FB_shared == "0") %>%
ungroup
p = ggplot(data = Posted_section, aes(x = reorder(section, pct), y = pct, fill = media))
p = p + geom_bar(stat = "identity", position = "dodge", width = 0.8) + coord_flip() +
labs(x = "Section", y = "Proportion")
p = p + theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
legend.position = "bottom",
legend.direction = "horizontal",
text = element_text(size=10))
plot(p)
Probit <- glm(FB_shared ~ section, family=binomial(link="probit"), data=DR_pol_all)
summary(Probit)
corp <- VCorpus(VectorSource(DR_pol_sub$text),  readerControl = list(language = "da"))
#add texts as variable (vector) to metadata frame
DR_pol_sub$texts_corp <- sapply(corp, function(x) paste(x, collapse = " "))
#create corpus (through quanteda) based on vector + variables from DR and Politiken
corp <- corpus(DR_pol_sub$texts_corp, docvars = DR_pol_sub[, 1:11])
## inspect corpus
tail(summary(corp, verbose = FALSE))[, 1:11]
# create document x feature matrix (through quanteda)
# pre-processing steps included
dfm <- dfm(corp, language = "danish",
toLower = TRUE,
removePunc = TRUE,
removeSeparators = TRUE,
stem = TRUE,
ignoredFeatures = stopwords("danish"),
verbose = FALSE
)
```
head(dfm)
dfm <- trim(dfm, minDoc = 80) ## present in at least 2% of documents
dim(dfm) ## dimensions of our final document x feature matrix
head(dfm)
load(url("https://github.com/bjarkedahl/Group_16/blob/master/analytics.RData?raw=true"))
summary(analytics)
load(url("https://github.com/bjarkedahl/Group_16/blob/master/Subset%20of%204000%20obs%20from%20DR%20and%20Politiken.RData?raw=true"))
load(url("https://github.com/bjarkedahl/Group_16/blob/master/Subset%20of%204000%20obs%20from%20DR%20and%20Politiken.RData?raw=true"))
load(url("https://github.com/bjarkedahl/Group_16/blob/93a29fc913548b017371b7dbba4fbe59c05eacc8/DR%20and%20Politiken%20all.RData"))
load(url("https://www.facebook.com/l.php?u=https%3A%2F%2Fgithub.com%2Fbjarkedahl%2FGroup_16%2Fblob%2Fmaster%2FDR%2520and%2520Politiken%2520all.RData%3Fraw%3Dtrue&h=iAQGqg_IU"))
load(url("https://github.com/bjarkedahl/Group_16/blob/master/Subset%20of%204000%20obs%20from%20DR%20and%20Politiken.RData?raw=true"))
load(url("https://github.com/bjarkedahl/Group_16/blob/master/DR%20and%20Politiken%20all.RData?raw=true")
load(url("https://github.com/bjarkedahl/Group_16/blob/master/DR%20and%20Politiken%20all.RData?raw=true"))
load(url("https://github.com/bjarkedahl/Group_16/blob/master/Subset%20of%204000%20obs%20from%20DR%20and%20Politiken.RData?raw=true"))
load(url("https://github.com/bjarkedahl/Group_16/blob/master/DR%20and%20Politiken%20all.RData?raw=true"))
kable(head(dfm), digits = 0)
install.packages("xtable")
library("xtable")
corp <- VCorpus(VectorSource(DR_pol_sub$text),  readerControl = list(language = "da"))
#add texts as variable (vector) to metadata frame
DR_pol_sub$texts_corp <- sapply(corp, function(x) paste(x, collapse = " "))
#create corpus (through quanteda) based on vector + variables from DR and Politiken
corp <- corpus(DR_pol_sub$texts_corp, docvars = DR_pol_sub[, 1:11])
## inspect corpus
tail(summary(corp, verbose = FALSE))[, 1:11]
# create document x feature matrix (through quanteda)
# pre-processing steps included
dfm <- dfm(corp, language = "danish",
toLower = TRUE,
removePunc = TRUE,
removeSeparators = TRUE,
stem = TRUE,
ignoredFeatures = stopwords("danish"),
verbose = FALSE
)
tab = xtable(head(dfm), digits = 0)
table(head(dfm))
head(dfm)
dfm <- trim(dfm, minDoc = 80) ## present in at least 2% of documents
dim(dfm) ## dimensions of our final document x feature matrix
t1 = c("IGF2, IGF2AS, INS, TH", "TH", "THZH", "ZGTH")
grep("TH",t1, value=T)
grep("Helle",DR_pol_all$text, value=T)
t1 = c(DR_pol_all)
grep("Helle",DR_pol_all$text, value=T)
t1 = c(DR_pol_all$text)
grep("Helle",t1, value=T)
?grep
t1 = as.character(DR_pol_all$text)
t1 = c(as.character(DR_pol_all$text))
grep("Helle", t1, value=T)
grep("Helle", t1, value=TRUE)
class(t1)
class(DR_pol_all$text)
grep("storstilet", t1, value=TRUE)
grep("storstilet", t1, value=TRUE, fixed = TRUE)
grep("Løkke", t1, value=TRUE, fixed = TRUE)
?if
?if
politiken$land="eftersøgning" if grep("Løkke", t1, value=TRUE, fixed = TRUE)
if grep("Løkke", t1, value=TRUE, fixed = TRUE) {DR_pol_all$land="eftersøgning"}
if (grep("Løkke", t1, value=TRUE, fixed = TRUE)) {DR_pol_all$land="eftersøgning"}
t1 = c(as.character(DR_pol_all$text))
if (grep("storstilet", t1, value=TRUE, fixed = TRUE)) {DR_pol_all$land="storstilet"}
View(DR_pol_all)
View(DR_pol_sub)
t1 = c(as.character(DR_pol_all$text))
if (grep("storstilet", t1, value=TRUE, fixed = TRUE)) {DR_pol_all$land=1}
DR_pol_all$land = ""
if (grep("storstilet", t1, value=TRUE, fixed = TRUE)) {gsub("","storstilet",DR_pol_all$land=1}
DR_pol_sub$land = ""
t1 = c(as.character(DR_pol_sub$text))
if (grep("storstilet", t1, value=TRUE, fixed = TRUE)) {gsub("","storstilet",DR_pol_sub$land=1)}
if (grep("storstilet", t1, value=TRUE, fixed = TRUE)) {gsub("","storstilet",DR_pol_sub$land)}
Country = [grep("Sverige", t1)]
t1[grep("Sverige", t1)]
View(DR_pol_sub)
t1[grep("december", t1)]
t2 = t1[grep("december", t1)]
t2 = [grep("december", t1)]
t2 = grep("december", t1)
df = ldply(t1, data.frame)
View(df)
df = ldply(t2, data.frame)
View(df)
p.data = list() # initialize empty list
for (i in df){
print(paste("processing", i, sep = " "))
p.data[[i]] = t1(i)
# waiting one second between hits
cat(" done!\n")
}
View(df)
p.data = list() # initialize empty list
for (i in df){
print(paste("processing", i, sep = " "))
p.data[[i]] = "december"
# waiting one second between hits
cat(" done!\n")
}
library("rvest")
read_html("https://da.wikipedia.org/wiki/Verdens_lande") %>%
html_node("#mw-content-text li") %>% # extract first node with class wikitable
html_table()
css.selector = "#mw-content-text li"
link = "https://da.wikipedia.org/wiki/Verdens_lande"
lande.data = read_html(link) %>%
html_nodes(css = css.selector) %>%
html_text()
lande.data
lande.df = dlply(lande.data, data.frame)
lande.df = dlply(as.character(lande.data), data.frame)
cbind(lande.data)
lande.df = dlply(lande.data, data.frame)
