## ---- message = FALSE, warning = FALSE-----------------------------------
library("dplyr")
df.section = df %>%
filter(!is.na(section)) %>%
filter(section != "") %>%
group_by(section) %>%
summarise(
likes.pr.post = mean(likes_count, na.rm = TRUE)
) %>%
arrange(-likes.pr.post)
## ---- message = FALSE, warning = FALSE-----------------------------------
p = ggplot(df.section, aes(x = reorder(section, likes.pr.post),
y = likes.pr.post))
p + geom_bar(stat = "identity") + coord_flip()
## ---- message = FALSE, warning = FALSE-----------------------------------
library("lubridate")
df$weekday = wday(df$created_time, label = TRUE)
## ---- message = FALSE, warning = FALSE-----------------------------------
p = ggplot(df, aes(x = likes_count, colour = weekday))
p = p + geom_density() + scale_x_log10()
## ---- message = FALSE, warning = FALSE, echo = FALSE---------------------
p = ggplot(df, aes(x = likes_count, colour = weekday))
p + geom_density() + scale_x_log10()
## ---- message = FALSE, warning = FALSE-----------------------------------
p = ggplot(df, aes(x = likes_count, y = comments_count))
p = p + geom_point() + scale_x_log10() + scale_y_log10() +
geom_smooth(na.rm = TRUE,
data = df[df$likes_count>0 & df$comments_count>0,]) +
facet_wrap(~ weekday, scales = "free")
## ---- message = FALSE, warning = FALSE, echo = FALSE---------------------
p = ggplot(df, aes(x = likes_count, y = comments_count))
p + geom_point() + scale_x_log10() + scale_y_log10() +
geom_smooth(na.rm = TRUE,
data = df[df$likes_count>0 & df$comments_count>0,]) +
facet_wrap(~ weekday, scales = "free")
## ---- message = FALSE, warning = FALSE-----------------------------------
df.subset = df %>%
filter(section %in% c("indland", "udland"))
## ---- message = FALSE, warning = FALSE, results="hide"-------------------
p = ggplot(df.subset, aes(x = likes_count, y = comments_count))
p = p + geom_point() + scale_x_log10() + scale_y_log10() +
geom_smooth(na.rm = TRUE,
data = df.subset[df.subset$likes_count>0 &
df.subset$comments_count>0,]) +
facet_grid(section~ weekday, scales = "free")
## ---- message = FALSE, warning = FALSE, echo = FALSE---------------------
p = ggplot(df.subset, aes(x = likes_count, y = comments_count))
p + geom_point() + scale_x_log10() + scale_y_log10() +
geom_smooth(na.rm = TRUE,
data = df.subset[df.subset$likes_count>0 & df.subset$comments_count>0,]) +
facet_grid(section~ weekday, scales = "free")
## ---- message = FALSE, warning = FALSE, echo = FALSE---------------------
p = ggplot(df.subset, aes(x = likes_count, y = comments_count,
size = shares_count, colour = weekday, shape = section))
p + geom_point() + scale_x_log10() + scale_y_log10()
## ---- message = FALSE, warning = FALSE-----------------------------------
tab = data.frame(table(df$section, df$weekday))
names(tab) = c("section", "weekday", "count")
## ---- message = FALSE, warning = FALSE-----------------------------------
p = ggplot(tab, aes(x = section, y = weekday))
p = p + geom_tile(aes(fill = count))
## ---- message = FALSE, warning = FALSE, echo = FALSE---------------------
p = ggplot(tab, aes(x = section, y = weekday))
p = p + geom_tile(aes(fill = count)) +
theme(axis.text.x = element_text(angle=90))
p
## ---- message = FALSE, warning = FALSE, echo = FALSE---------------------
p = ggplot(df, aes(x = section))
p + geom_histogram()
## ---- message = FALSE, warning = FALSE, echo = FALSE, echo = FALSE-------
p = ggplot(df, aes(x = likes_count, y = comments_count))
p + geom_point(alpha = .35) + scale_x_log10() + scale_y_log10()
## ---- message = FALSE, warning = FALSE, echo = FALSE, echo = FALSE-------
p = ggplot(df[df$likes_count>0 & df$comments_count>0,],
aes(x = likes_count, y = comments_count))
p + geom_hex() + scale_x_log10() + scale_y_log10() +
scale_fill_continuous(trans="log10")
## ---- message = FALSE, warning = FALSE, echo = FALSE---------------------
p = ggplot(df, aes(x = as.Date(created_time), y = likes_count))
p + geom_line() + labs(title = "Number of likes over time",
y = "number of likes", x = "time")
## ---- message = FALSE, warning = FALSE, echo = FALSE---------------------
p = ggplot(df, aes(x = as.Date(created_time), y = likes_count))
p + geom_line() + labs(title = "Number of likes over time",
y = "number of likes", x = "time") + theme_minimal()
## ---- message = FALSE, warning = FALSE, echo = FALSE---------------------
p = ggplot(df, aes(x = likes_count, y = comments_count))
p + geom_point(alpha = .25) + scale_x_log10() + scale_y_log10() +
geom_smooth(na.rm = TRUE,
data = df[df$likes_count>0 &
df$comments_count>0,],
colour = "green") +
geom_rug() + theme_minimal() +
labs(x = "likes (log scale)", y = "comments (log scale)",
title = "Relationship between likes and comments on Politiken's Facebook page")
## ---- message = FALSE, warning = FALSE, echo = FALSE---------------------
p = ggplot(df.subset, aes(x = likes_count,
y = comments_count, colour = section))
p + geom_point(alpha = .25) + scale_x_log10() + scale_y_log10() +
geom_smooth(na.rm = TRUE,
data = df.subset[df.subset$likes_count>0 &
df.subset$comments_count>0,],
method = "lm") +
geom_rug() + theme_minimal() +
labs(x = "likes (log scale)", y = "comments (log scale)",
title = "Relationship between likes and comments on Politiken's Facebook page")
install.packages("knitr")
## ---- message = FALSE, warning = FALSE, eval = FALSE---------------------
## # install.packages("knitr")
## library("knitr")
## purl("https://raw.githubusercontent.com/sebastianbarfort/sds/gh-pages/_slides/lecture3.Rmd")
## ---- message = FALSE, warning = FALSE-----------------------------------
library("readr")
df = read_csv("https://raw.githubusercontent.com/sebastianbarfort/sds/master/data/marijuana-street-price-clean.csv")
## ---- message = FALSE, warning = FALSE-----------------------------------
library("lubridate")
library("dplyr")
df$year = year(df$date)
df = df %>%
group_by(State, year) %>%
summarise(
m.price = mean(HighQ, na.rm = TRUE)
) %>%
mutate(
region = tolower(State)
)
## ---- message = FALSE, warning = FALSE-----------------------------------
library("maps")
library("ggplot2")
us.states = map_data("state")
head(us.states)
## ---- message = FALSE, warning = FALSE-----------------------------------
df.merge = left_join(df, us.states)
## ---- message = FALSE, warning = FALSE-----------------------------------
p = ggplot(df.merge, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = m.price)) +
facet_wrap( ~ year, ncol = 1) +
expand_limits() +
theme_minimal()
## ---- message = FALSE, warning = FALSE, echo = FALSE, fig.width = 5, fig.height = 6----
ggplot(df.merge, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill = m.price)) +
facet_wrap( ~ year, ncol = 1) +
expand_limits(x = df.merge$long, y = df.merge$lat) +
theme_minimal()
## ---- message = FALSE, warning = FALSE-----------------------------------
# devtools::install_github("hrbrmstr/ggcounty")
library("ggcounty")
data(population) # built-in US population by FIPS code data set
population$brk <- cut(population$count,
breaks=c(0, 100, 1000, 10000, 100000, 1000000, 10000000),
labels=c("0-99", "100-1K", "1K-10K", "10K-100K",
"100K-1M", "1M-10M"),
include.lowest=TRUE) # define appropriate (& nicely labeled) population breaks
us <- ggcounty.us()
gg <- us$g # start the plot with our base map
gg <- gg + geom_map(data=population, map=us$map,
aes(map_id=FIPS, fill=brk),
color="white", size=0.125) # add a new geom with our population (choropleth)
gg <- gg + scale_fill_manual(values=c("#ffffcc", "#c7e9b4", "#7fcdbb",
"#41b6c4", "#2c7fb8", "#253494"),
name="Population")
## ---- echo = FALSE-------------------------------------------------------
# library(devtools)
# install_github("hrbrmstr/ggcounty")
library("ggcounty")
# built-in US population by FIPS code data set
data(population)
# define appropriate (& nicely labeled) population breaks
population$brk <- cut(population$count,
breaks=c(0, 100, 1000, 10000, 100000, 1000000, 10000000),
labels=c("0-99", "100-1K", "1K-10K", "10K-100K",
"100K-1M", "1M-10M"),
include.lowest=TRUE)
# get the US counties map (lower 48)
us <- ggcounty.us()
# start the plot with our base map
gg <- us$g
# add a new geom with our population (choropleth)
gg <- gg + geom_map(data=population, map=us$map,
aes(map_id=FIPS, fill=brk),
color="white", size=0.125)
# define nice colors
gg <- gg + scale_fill_manual(values=c("#ffffcc", "#c7e9b4", "#7fcdbb",
"#41b6c4", "#2c7fb8", "#253494"),
name="Population")
gg
## ---- message = FALSE, warning = FALSE-----------------------------------
df = read_csv("http://wfs-kbhkort.kk.dk/k101/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=k101:baenk&outputFormat=csv&SRSNAME=EPSG:4326")
names(df)
## ---- message = FALSE, warning = FALSE-----------------------------------
library("dplyr")
library("stringr")
df = df %>%
select(wkb_geometry, baenk_tilstand)
# cleaning
df$wkb_geometry = gsub("\\(|\\)", "", df$wkb_geometry)
df$wkb_geometry = str_extract(df$wkb_geometry, "[0-9].+")
x = str_split(df$wkb_geometry, pattern  = " ")
x = do.call(rbind.data.frame, x)
df = bind_cols(df, x)
names(df) = c("wbk_geometry", "baenk_tilstand", "lat", "lon")
df$lon = as.numeric(as.character(df$lon))
df$lat = as.numeric(as.character(df$lat))
## ---- cache = TRUE, message = FALSE, warning = FALSE---------------------
library("ggmap")
qmplot(lat, lon, zoom = 15, data = df,
maptype = "toner-background", color = I("red"))
library ("plyr")
library ("dplyr")
library ("rvest")
library ("readr")
library ("knitr")
library ("stringr")
library ("xml2")
library ("ggplot2")
library("mapproj")
load("C:/Users/Bjarke/OneDrive/Documents/Group_16/.RData")
View(df_India_pop)
View(df_state)
df_state$urbanpop=gsub(",", "",df_state$Urban.Population.24.)
df_state$urbanpop1 = gsub("^\\s+", "", df_state$urbanpop)
as.numeric(df_state$urbanpop1)
df_state$urbanpop=gsub(",", "",df_state$Urban.Population.24.)
df_state$urbanpop1 = gsub("^\\s+", "", df_state$urbanpop)
as.numeric(df_state$urbanpop1)
df_state$urban_relativepayment = as.numeric(df_state$total.payments)/
as.numeric(df_state$urbanpop1)*10000
p = ggplot(data = df_state, aes(x=state_2, y=urban_relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 10,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=urban_relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 10,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p
plot(p)
View(df_state)
df_state$share_urban_pop= as.numeric(df_state$urbanpop1)/as.numeric(df_state$pop1)
p = ggplot(data = df_state, aes(x=relativepayment, y=share_urban_pop))
p = p + geom_point() + coord_flip() + labs(title = "Figure 4: Log(payment pr. 10,000 inhabitants",
x = "Relative Payment of total pop (log)",
y = "Log(share of population living in urban areas")
p = p + scale_y_log10()
plot(p)
p = ggplot(data = df_state, aes(x=relativepayment, y=share_urban_pop))
p = p + geom_point() + coord_flip() + labs(title = "Figure 4: Log(payment pr. 10,000 inhabitants",
x = "Log of Relative Payment of total pop (log)",
y = "share of population living in urban areas")
p = p + scale_x_log10()
plot(p)
cor(df_state$share_urban_pop, relativepayment)
cor(df_state$share_urban_pop, df_state$relativepayment)
View(df_state)
View(df_state)
?summarise
df_state = df %>%
filter(!is.na(state_1) & !(df$state_1 =="")) %>%
group_by(state_1) %>%
summarise(total.payments = sum(payment, na.rm = TRUE), n_bribes = N() )
df_state$state_2 = gsub("^\\s+", "", df_state$state_1)
df_state = df %>%
filter(!is.na(state_1) & !(df$state_1 =="")) %>%
group_by(state_1) %>%
summarise(total.payments = sum(payment, na.rm = TRUE), n_bribes = n() )
df_state$state_2 = gsub("^\\s+", "", df_state$state_1)
View(df_state)
df_state[29,"state_2"]="Delhi"
df_state = inner_join(df_India_pop, df_state, by="state_2")
df_state$pop=gsub(",", "",df_state$Population.24.)
df_state$pop1 = gsub("^\\s+", "", df_state$pop)
as.numeric(df_state$pop1)
as.numeric(df_state$total.payments)
df_state$relativepayment = as.numeric(df_state$total.payments) / as.numeric(df_state$pop1) * 10000
arrange(df_state, -relativepayment)
df_state$urbanpop=gsub(",", "",df_state$Urban.Population.24.)
df_state$urbanpop1 = gsub("^\\s+", "", df_state$urbanpop)
as.numeric(df_state$urbanpop1)
df_state$urban_relativepayment = as.numeric(df_state$total.payments)/
as.numeric(df_state$urbanpop1)*10000
df_state$share_urban_pop = as.numeric(df_state$urbanpop1)/as.numeric(df_state$pop1)
df_state$Relativebribes = as.numeric(df_state$n_bribes)/as.numeric(df_state$pop1)
df_state$Relativebribes = as.numeric(df_state$n_bribes)/as.numeric(df_state$urbanpop)
df_state$urbanpop=gsub(",", "",df_state$Urban.Population.24.)
df_state$urbanpop1 = gsub("^\\s+", "", df_state$urbanpop)
as.numeric(df_state$urbanpop1)
df_state$urban_relativepayment = as.numeric(df_state$total.payments)/
as.numeric(df_state$urbanpop1)*10000
df_state$share_urban_pop = as.numeric(df_state$urbanpop1)/as.numeric(df_state$pop1)
df_state$Relativebribes = as.numeric(df_state$n_bribes)/as.numeric(df_state$pop1)
df_state$Relativebribes_urban = as.numeric(df_state$n_bribes)/as.numeric(df_state$urbanpop)
p = ggplot(data = df_state, aes(x=Relativebribes, y=share_urban_pop))
p = p + geom_point() + coord_flip() + labs(title = "Figure 4: Log(payment pr. 10,000 inhabitants",
x = "Log of Relative Payment of total pop (log)",
y = "share of population living in urban areas")
p = p
plot(p)
cor(df_state$share_urban_pop, df_state$relativepayment, Relativebribes)
cor(df_state$share_urban_pop, df_state$relativepayment, df_state$Relativebribes)
pcor(df_state$share_urban_pop, df_state$relativepayment, df_state$Relativebribes)
install.packages("polycor")
library("polycor")
pcor(df_state$share_urban_pop, df_state$relativepayment, df_state$Relativebribes)
library("polycor")
pcor(df_state$share_urban_pop, df_state$relativepayment, df_state$Relativebribes)
library("ggm")
install.packages("ggm")
cor(df_state$share_urban_pop, df_state$relativepayment)
cor(df_state$share_urban_pop, df_state$Relativebribes)
p = ggplot(data = df_state, aes(x=relativepayment, y=share_urban_pop))
p = p + geom_point() + coord_flip() + labs(title = "Figure 5: Log(payment pr. 10,000 inhabitants",
x = "Log of Relative Payment of total pop (log)",
y = "share of population living in urban areas")
p = p
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=Relativebribes))
p = p + geom_bar(stat="identity") + coord_flip() + labs(title = "Figure 5: Log(payment pr. 10,000 inhabitants",
x = "State",
y = "Bribes pr. 10.000 inhabitants")
p = p
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=Relativebribes_urban))
p = p + geom_bar(stat="identity") + coord_flip() + labs(title = "Figure 5: Log(payment pr. 10,000 inhabitants",
x = "State",
y = "Bribes pr. 10.000 inhabitants")
p = p
plot(p)
View(df_state)
p = ggplot(data = df_state, aes(x=state_2, y=Relativebribes_urban))
p = p + geom_bar(stat="identity") + coord_flip() + labs(title = "Figure 5: Log(payment pr. 10,000 inhabitants",
x = "State",
y = "Bribes pr. 10.000 inhabitants")
p = p + scale_y_continuous()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=Relativebribes_urban))
p = p + geom_bar(stat="identity") + coord_flip() + labs(title = "Figure 5: Log(payment pr. 10,000 inhabitants",
x = "State",
y = "Bribes pr. 10.000 inhabitants")
p = p + scale_y_continuous(labels= comma)
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=Relativebribes_urban))
p = p + geom_bar(stat="identity") + coord_flip() + labs(title = "Figure 5: Log(payment pr. 10,000 inhabitants",
x = "State",
y = "Bribes pr. 10.000 inhabitants")
p = p + scale_y_continuous(breaks= pretty_breaks())
plot(p)
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
as.numeric(df_state$pop1)
as.numeric(df_state$total.payments)
df_state$relativepayment = as.numeric(df_state$total.payments) / as.numeric(df_state$pop1) * 100000
arrange(df_state, -relativepayment)
library ("plyr")
library ("dplyr")
library ("rvest")
library ("readr")
library ("knitr")
library ("stringr")
library ("xml2")
library ("ggplot2")
library("mapproj")
#Plotting the data to se the states with the highest relative bribe payments
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 10,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10()
plot(p)
df_state$relativepayment = as.numeric(df_state$total.payments) / as.numeric(df_state$pop1) * 1000000
#Plotting the data to se the states with the highest relative bribe payments
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10()
plot(p)
df_state$relativepayment = as.numeric(df_state$total.payments) / as.numeric(df_state$pop1) * 10000000
#Plotting the data to se the states with the highest relative bribe payments
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10()
plot(p)
df_state$relativepayment = as.numeric(df_state$total.payments) / as.numeric(df_state$pop1) * 100000
#Plotting the data to se the states with the highest relative bribe payments
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=Relativebribes_urban))
p = p + geom_bar(stat="identity") + coord_flip() + labs(title = "Figure 5: Bribes pr. 100,000 urban inhabitants",
x = "State",
y = "Bribes pr. 100,000 urban inhabitants")
p = p + scale_y_continuous()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=Relativebribes_urban))
p = p + geom_bar(stat="identity") + coord_flip() + labs(title = "Figure 5: Bribes pr. 100,000 urban inhabitants",
x = "State",
y = "Bribes pr. 100,000 urban inhabitants")
p = p + scale_y_log10()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=urban_relativepayment))
p = p + geom_bar(stat="identity") + coord_flip() + labs(title = "Figure 5: Bribes pr. 100,000 urban inhabitants",
x = "State",
y = "Bribes pr. 100,000 urban inhabitants")
p = p + scale_y_log10()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10()
plot(p)
p = ggplot(data = df_state, aes(x=Relativebribes, y=share_urban_pop))
p = p + geom_point() + coord_flip() + labs(title = "Figure 6: Relative bribes compared to share of total population living in urban areas",
x = "Log of bribes pr. 100.000 inhabitants",
y = "Share of population living in urban areas")
p = p
plot(p)
cor(df_state$share_urban_pop, df_state$relativepayment)
cor(df_state$share_urban_pop, df_state$Relativebribes)
p = ggplot(data = df_state, aes(x=urban_relativepayment, y=share_urban_pop))
p = p + geom_point() + coord_flip() + labs(title = "Figure 6: Relative bribes compared to share of total population living in urban areas",
x = "Log of bribes pr. 100.000 inhabitants",
y = "Share of population living in urban areas")
p = p
plot(p)
p = ggplot(data = df_state, aes(x=urban_relativepayment, y=share_urban_pop))
p = p + geom_point() + coord_flip() + labs(title = "Figure 6: Relative bribes compared to share of total population living in urban areas",
x = "Log of bribes pr. 100.000 inhabitants",
y = "Share of population living in urban areas")
p = p + scale_x_log10()
plot(p)
p = ggplot(data = df_state, aes(x=relativepayment, y=share_urban_pop))
p = p + geom_point() + coord_flip() + labs(title = "Figure 6: Relative bribes compared to share of total population living in urban areas",
x = "Log of bribes pr. 100.000 inhabitants",
y = "Share of population living in urban areas")
p = p + scale_x_log10()
plot(p)
library("mapproj")
install.packages("mapproj")
library("mapproj")
p = ggplot(data = df_state, aes(x=relativepayment, y=share_urban_pop))
p = p + geom_point() + coord_flip() + labs(title = "Figure 6: Relative payments compared to share of total population living in urban areas",
x = "Log of payments pr. 100.000 inhabitants",
y = "Share of population living in urban areas")
p = p + scale_x_log10()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=urban_relativepayment))
p = p + geom_bar(stat="identity") + coord_flip() + labs(title = "Figure 5: Bribes pr. 100,000 urban inhabitants",
x = "State",
y = "Bribes pr. 100,000 urban inhabitants")
p = p + scale_y_log10()
plot(p)
df_state$urbanpop=gsub(",", "",df_state$Urban.Population.24.)
df_state$urbanpop1 = gsub("^\\s+", "", df_state$urbanpop)
as.numeric(df_state$urbanpop1)
df_state$urban_relativepayment = as.numeric(df_state$total.payments)/
as.numeric(df_state$urbanpop1)*100000
df_state$share_urban_pop = as.numeric(df_state$urbanpop1)/as.numeric(df_state$pop1)
df_state$Relativebribes = as.numeric(df_state$n_bribes)/as.numeric(df_state$pop1)
df_state$Relativebribes_urban = as.numeric(df_state$n_bribes)/as.numeric(df_state$urbanpop)
p = ggplot(data = df_state, aes(x=state_2, y=urban_relativepayment))
p = p + geom_bar(stat="identity") + coord_flip() + labs(title = "Figure 5: Relative bribe-pay pr. 100,000 urban inhabitants",
x = "State",
y = "Bribes pr. 100,000 urban inhabitants")
p = p + scale_y_log10()
plot(p)
p = ggplot(data = df_state, aes(x=state_2, y=relativepayment))
p = p + geom_bar(stat = "identity") + coord_flip() + labs(title = "Figure 4: Log(payment pr. 100,000 inhabitants",
x = "State",
y = "Log(Total payment)")
p = p + scale_y_log10()
plot(p)
